# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kIVpnSkizC-4SfDqEQFo_vjV43I0KDHZ
"""

# Blood Bank Management System in Python

# Donor class to store donor details
class Donor:
    def __init__(self, name, blood_group, age, contact, last_donation_date):
        self.name = name
        self.blood_group = blood_group
        self.age = age
        self.contact = contact
        self.last_donation_date = last_donation_date

    def __str__(self):
        return f"Name: {self.name}, Blood Group: {self.blood_group}, Age: {self.age}, Contact: {self.contact}, Last Donation: {self.last_donation_date}"


# Blood Bank class to manage donors and blood inventory
class BloodBank:
    def __init__(self):
        self.donors = []  # List to store donors
        self.blood_inventory = {
            "A+": 0, "A-": 0, "B+": 0, "B-": 0,
            "O+": 0, "O-": 0, "AB+": 0, "AB-": 0
        }

    # Add a new donor to the system
    def add_donor(self, donor):
        self.donors.append(donor)
        print(f"Donor {donor.name} added successfully!")

    # Update blood inventory when a donation is made
    def update_inventory(self, blood_group, amount):
        if blood_group in self.blood_inventory:
            self.blood_inventory[blood_group] += amount
            print(f"Inventory updated: {blood_group} now has {self.blood_inventory[blood_group]} units.")
        else:
            print("Invalid blood group!")

    # Request blood from the inventory
    def request_blood(self, blood_group, amount):
        if blood_group in self.blood_inventory and self.blood_inventory[blood_group] >= amount:
            self.blood_inventory[blood_group] -= amount
            print(f"{amount} units of {blood_group} blood provided.")
        else:
            print(f"Insufficient {blood_group} blood in inventory!")

    # Search for a donor by blood group
    def search_donor_by_blood_group(self, blood_group):
        found = [donor for donor in self.donors if donor.blood_group == blood_group]
        if found:
            for donor in found:
                print(donor)
        else:
            print("No donors found with this blood group.")

    # Remove a donor from the system
    def remove_donor(self, name):
        for donor in self.donors:
            if donor.name == name:
                self.donors.remove(donor)
                print(f"Donor {name} removed.")
                return
        print(f"No donor found with name {name}.")

# Example usage
def main():
    blood_bank = BloodBank()

    while True:
        print("\n----- Blood Bank Management System -----")
        print("1. Add Donor")
        print("2. Update Blood Inventory")
        print("3. Request Blood")
        print("4. Search Donor by Blood Group")
        print("5. Remove Donor")
        print("6. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            name = input("Enter donor's name: ")
            blood_group = input("Enter blood group: ")
            age = int(input("Enter donor's age: "))
            contact = input("Enter contact details: ")
            last_donation_date = input("Enter last donation date (DD-MM-YYYY): ")

            donor = Donor(name, blood_group, age, contact, last_donation_date)
            blood_bank.add_donor(donor)

        elif choice == '2':
            blood_group = input("Enter blood group to update: ")
            amount = int(input("Enter amount of blood donated: "))
            blood_bank.update_inventory(blood_group, amount)

        elif choice == '3':
            blood_group = input("Enter blood group to request: ")
            amount = int(input("Enter amount of blood needed: "))
            blood_bank.request_blood(blood_group, amount)

        elif choice == '4':
            blood_group = input("Enter blood group to search: ")
            blood_bank.search_donor_by_blood_group(blood_group)

        elif choice == '5':
            name = input("Enter donor's name to remove: ")
            blood_bank.remove_donor(name)

        elif choice == '6':
            print("Exiting the system.")
            break

        else:
            print("Invalid choice! Please try again.")

if __name__ == "__main__":
    main()